rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
  	function validateResourceFields(data){
    	return data.keys().hasOnly(['name','owner','summary','waiting','participants','createdAt','lastActive']) &&      	
              data.name is string && 
              data.name.size() <= 30 &&                      
              data.owner is string && 
              data.owner.size() <= 128 &&                      
              data.summary is string && 
              data.summary.size() <= 1000 &&
              data.waiting is list &&              
              data.waiting.size() <= 10 &&
              data.participants is list &&              
              data.participants.size() <= 10 &&
              data.createdAt is timestamp &&
              data.lastActive is timestamp;
    }
    
    match /users/{userId} {
    	
    	allow create: if request.auth != null && 
                        // user creating visitor center
      									request.auth.uid == userId &&
                        request.resource.data.keys().hasOnly(['dodoCode', 'next']) &&
      									request.resource.data.dodoCode is string && 
                        request.resource.data.dodoCode.size() == 5 && 
                        request.resource.data.next is string && 
                        request.resource.data.next.size() == 0;
                        
                        
      // allow single doc reads
      allow get: if request.auth != null &&
                      // owner
      								(request.auth.uid == userId || 
                      // user reading dodo code
                      request.auth.uid == resource.data.next);

      allow update: if request.auth != null && 
                        // owner updating next visitor
      									(request.auth.uid == userId &&
                        request.resource.data.keys().hasOnly(['dodoCode', 'next']) &&
                        request.resource.data.next is string && 
                        request.resource.data.next.size() <= 128 &&                      
                        request.resource.data.dodoCode == resource.data.dodoCode) ||
                        
                        // owner updating dodo code
                        (request.auth.uid == userId &&
                        request.resource.data.keys().hasOnly(['dodoCode', 'next']) && 
                        request.resource.data.dodoCode is string &&
                        request.resource.data.dodoCode.size() < 6 &&
                        request.resource.data.next == resource.data.next);
    }
       
    match /centers/{centerId} {
    									
      allow create: if request.auth != null && 
                      // owner creating center
                      (request.resource.data.owner == request.auth.uid &&
                      resource == null &&
      								validateResourceFields(request.resource.data) &&                      
                      request.resource.data.waiting.size() == 0 &&
                      request.resource.data.participants.size() == 0 &&
                      request.resource.data.createdAt == request.time && 
                      request.resource.data.lastActive == request.time);
      
      // allow reading multiple docs with limit
      allow list: if request.auth != null && request.query.limit <= 5;                     
      
      // allow single doc reads
      allow get: if request.auth != null;
      
      allow update: if request.auth != null &&
      								// owner removing visitor from waiting list
                      // .update() used so request.resource.data contains the resource after update, which includes all other fields
      								(request.auth.uid == resource.data.owner &&                                            
                      validateResourceFields(request.resource.data) &&
                      validateResourceFields(resource.data) &&
                      request.resource.data.waiting.size() == resource.data.waiting.size() - 1 &&
                      request.resource.data.participants.size() == resource.data.participants.size() - 1 &&                    
                      // other data is unmodified
                      request.resource.data.name == resource.data.name &&
                      request.resource.data.owner == resource.data.owner &&
                      request.resource.data.summary == resource.data.summary &&
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.lastActive == resource.data.lastActive) ||

                      // owner updating center data: name, summary
                      (request.auth.uid == resource.data.owner &&                      
                      validateResourceFields(request.resource.data) &&
                      validateResourceFields(resource.data) &&
                      // other data is unmodified           
                      request.resource.data.owner == resource.data.owner &&    
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.lastActive == resource.data.lastActive &&
      								request.resource.data.waiting.size() == resource.data.waiting.size() &&
                      request.resource.data.participants.size() == resource.data.participants.size()) || 

                      // owner updating last active
                      (request.auth.uid == resource.data.owner &&                      
                      validateResourceFields(request.resource.data) &&
                      validateResourceFields(resource.data) &&
                      // other data is unmodified           
                      request.resource.data.owner == resource.data.owner &&    
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.name == resource.data.name &&
                      request.resource.data.summary == resource.data.summary &&
      								request.resource.data.waiting.size() == resource.data.waiting.size() &&
                      request.resource.data.participants.size() == resource.data.participants.size()) ||                      

                      // owner clearing waiting list
                      (request.auth.uid == resource.data.owner &&                                            
                      validateResourceFields(request.resource.data) &&
                      validateResourceFields(resource.data) &&
                      // incoming arrays are empty
                      request.resource.data.waiting.size() == 0 &&
                      request.resource.data.participants.size() == 0 &&                    
                      // existing arrays are not empty
                      resource.data.waiting.size() != 0 &&
                      resource.data.participants.size() != 0 &&                    
                      // other data is unmodified
                      request.resource.data.name == resource.data.name &&
                      request.resource.data.owner == resource.data.owner &&
                      request.resource.data.summary == resource.data.summary &&
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.lastActive == resource.data.lastActive) || 

                      // user adding themselves to waiting list
                      (validateResourceFields(request.resource.data) &&                      
                      request.resource.data.participants[request.resource.data.participants.size() - 1] == request.auth.uid &&
                      (request.auth.uid in resource.data.participants) == false &&
                      // check entry in waiting list is the user      
      								request.resource.data.waiting[request.resource.data.waiting.size() - 1].keys().hasOnly(['name', 'uid', 'joinedAt']) &&
      								request.resource.data.waiting[request.resource.data.waiting.size() - 1].uid == request.auth.uid &&
      								request.resource.data.waiting[request.resource.data.waiting.size() - 1].name is string &&
      								request.resource.data.waiting[request.resource.data.waiting.size() - 1].name.size() <= 30 &&
                      request.resource.data.waiting[request.resource.data.waiting.size() - 1].joinedAt is timestamp &&
                      // other data is unmodified
                      request.resource.data.name == resource.data.name &&
                      request.resource.data.owner == resource.data.owner &&
                      request.resource.data.summary == resource.data.summary &&
                      request.resource.data.createdAt == resource.data.createdAt && 
                      request.resource.data.lastActive == resource.data.lastActive) ||

                      // user removing themselves from the queue
                      (validateResourceFields(request.resource.data) &&                      
                      request.auth.uid in resource.data.participants &&                      
                      (request.auth.uid in request.resource.data.participants) == false &&
                      // allowing only 1 update to delete, if multiple deletes all but one will fail
                      // this is fine for the added security of verifying only a single delete at a time
                      request.resource.data.waiting.size() == resource.data.waiting.size() - 1 &&  
                      request.resource.data.participants.size() == resource.data.participants.size() - 1 &&
      								// other data is unmodified
                      request.resource.data.name == resource.data.name &&
                      request.resource.data.owner == resource.data.owner &&
                      request.resource.data.summary == resource.data.summary &&
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.lastActive == resource.data.lastActive);   
    }
  }
}